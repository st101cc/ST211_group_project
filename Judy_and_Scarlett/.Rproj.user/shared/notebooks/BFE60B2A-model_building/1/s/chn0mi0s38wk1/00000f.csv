"0","show_outliers<-function(the.linear.model,topN){"
"0","  #length of data"
"0","  n=length(fitted(the.linear.model))"
"0","  #number of parameters estimated"
"0","  p=length(coef(the.linear.model))"
"0","  #standardised residuals over 3"
"0","  res.out<-which(abs(rstandard(the.linear.model))>3) #sometimes >2"
"0","  #topN values"
"0","  res.top<-head(rev(sort(abs(rstandard(the.linear.model)))),topN)"
"0","  #high leverage values"
"0","  lev.out<-which(lm.influence(the.linear.model)$hat>2*p/n)"
"0","  #topN values"
"0","  lev.top<-head(rev(sort(lm.influence(the.linear.model)$hat)),topN)"
"0","  #high diffits"
"0","  dffits.out<-which(dffits(the.linear.model)>2*sqrt(p/n))"
"0","  #topN values"
"0","  dffits.top<-head(rev(sort(dffits(the.linear.model))),topN)"
"0","  #Cook's over 1"
"0","  cooks.out<-which(cooks.distance(the.linear.model)>1)"
"0","  #topN cooks"
"0","  cooks.top<-head(rev(sort(cooks.distance(the.linear.model))),topN)"
"0","  #Create a list with the statistics -- cant do a data frame as different lengths "
"0","  list.of.stats<-list(Std.res=res.out,Std.res.top=res.top, Leverage=lev.out, Leverage.top=lev.top, DFFITS=dffits.out, DFFITS.top=dffits.top, Cooks=cooks.out,Cooks.top=cooks.top)"
"0","  #return the statistics"
"0","  list.of.stats}"
